* 基础知识
** 基础概念
*** 元组(Tuple)
    消息传递的基本单元，是一个命名的值列表，元祖中的字段可以是任何类型的对象。
*** 流(Stream)
    Storm中的核心抽象，是一个无界的元组序列。源源不断传递的元组就组成了流。

    Spout 是流的源头，通常从外部数据源读取元组，并emit到拓扑中。

    Bolt 接收任何数量的输入流，执行处理后，可能提交新的流，复杂流的转换中，可能需要
    多个步骤，因此需要多个Bolt。Bolt可以执行运行函数、过滤元组、连接流核连接数据库等任何事情。
*** 喷口(Spout)
*** 螺栓(Bolt)
*** 拓扑(Topology)
*** 主控节点与工作节点
    1. Master Node
       1) Nimbus (类似Hadoop的JobTracker)

	  负责在集群中分发代码，对节点分配任务，并监视主机故障。

    2. Worker Node
       1) Supervisor

	  监听主机上已经分配的主机的作业，启动核停止Nimbus已经分配的工作进程。
*** 流分组(Stream grouping)
    拓扑定义中的一部分，为每个Bolt指定应该接收哪个流作为输入。流分组定义了流/元组如何在Bolt的任务之间进行分发。

    内置了7种流分组方式
*** 工作进程(Worker)
    Worker 是 Spout/Bolt 中运行具体处理逻辑的进程。拓扑跨一个或多个Worker进程执行。
*** 任务(Task)
    Worker中每个Spout/Bolt的线程称为一个任务(Task)。每个Spout或者Bolt在集群中执行许多任务。
*** 执行器(Executor)
    在Storm 0.8以后，Task不再与物理线程对应，同一个Spout/Bolt的Task可能会共享一个物理线程，该线程称为
    执行器(Executor)
*** 可靠性(Reliability)
    Storm 保证每一个 Spout 元组将被拓扑完全可靠的处理。 它跟踪每个Spout 元组的元组树。
** 配置
   配置优先级

   defaults.yaml < storm.yaml < 特定拓扑的配置 < 内部特定组件的配置 < 外部特定组件的配置

*** defaults.yaml
    #+BEGIN_SRC conf defaults.yaml配置文件
	########## defaults.yaml 存储的时默认值
	########## 可以在storm.yaml文件中写入额外配置
	java.library.path: "/usr/local/lib:/opt/local/lib"

	### storm.* 配置时普通的配置
	# storm.local.dir 保存jar包的目录
	storm.local.dir: "storm-local"
	storm.zookeeper.servers:
			 - "localhost"
	storm.zookeeper.port: 2181
	storm.zookeeper.root: "/storm"
	storm.zookeeper.session.timeout: 20000
	storm.zookeeper.connection.timeout: 15000
	storm.zookeeper.retry.times: 5
	storm.zookeeper.retry.interval: 1000
	storm.zookeeper.retry.intervalceiling.millis: 30000
	storm.cluster.mode: "distributed" # can be distributed or local
	storm.local.mode.zmq: false
	storm.thrift.transport: "backtype.storm.security.auth.SimpleTransportPlugin"
	storm.messaging.transport: "backtype.storm.messaging.netty.Context"

	### nimbus.* 配置应用于主节点
	nimbus.host: "localhost"
	nimbus.thrift.port: 6627
	nimbus.thrift.max_buffer_size: 1048567
	nimbus.childopts: "-Xmx1024m"
	nimbus.task.timeout.secs: 30
	nimbus.supervisor.timeout.secs: 60
	nimbus.monitor.freq.secs: 10
	nimbus.cleanup.inbox.freq.secs: 600
	nimbus.inbox.jar.expiration.secs: 3600
	nimbus.task.launch.secs: 120
	nimbus.reassign: true
	nimbus.file.copy.expiration.secs: 600
	nimbus.topology.validator: "backtype.storm.nimbus.DefaultTopologyValidator"

	### ui.* 配置应用于主节点
	ui.port: 8080
	ui.childopts: "-Xmx768m"

	logviewer.port: 8000
	logviewer.childopts: "-Xmx128m"
	logviewer.appender.name: "A1"

	drpc.port: 3772
	drpc.worker.threads: 64
	drpc.queue.size: 128
	drpc.invocations.port: 3773
	drpc.request.timeout.secs: 600
	drpc.childopts: "-Xmx768m"

	transactional.zookeeper.root: "/transactional"
	transactional.zookeeper.servers: null
	transactional.zookeeper.port: null

	### supervisor.* 配置用于 Supervisor 节点
	# 定义可以在主机上运行的工作进程数量，每个进程分配一个通信端口
	supervisor.slots.ports:
			 - 6700
			 - 6701
			 - 6702
			 - 6703
	supervisor.childopts: "-Xmx256m"
	# Supervisor 等待多长事件确保工作进程已经启动
	supervisor.worker.start.timeout.secs: 120
	# Supervisor 认为工作进程死亡并试图进行重启的心跳时间的大小
	supervisor.worker.timeout.secs: 30
	# Supervisor 检查工作进程的状态的频率，Supervisor会在必要时重启工作进程
	supervisor.monitor.frequency.secs: 3
	# Supervisor 到Nimbus的心跳的频率
	supervisor.heartbeat.frequency.secs: 5
	supervisor.enable: true

	### worker.* 配置用于工作进程的任务
	worker.childopts: "-Xmx768m"
	worker.heartbeat.frequency.secs: 1

	task.heartbeat.frequency.secs: 3
	task.refresh.poll.secs: 10

	zmq.threads: 1
	zmq.linger.millis: 5000
	zmq.hwm: 0

	storm.messaging.netty.server_worker_threads: 1
	storm.messaging.netty.client_worker_threads: 1
	storm.messaging.netty.buffer_size: 5242880 # 5MB缓存
	storm.messaging.netty.max_retries: 30
	storm.messaging.netty.max_wait_ms: 1000
	storm.messaging.netty.min_wait_ms: 100

	### topology.* 配置应用于具体执行的 Storm
	topology.enable.message.timeouts: true
	topology.debug: false
	topology.optimize: true
	topology.workers: 1
	topology.acker.executors: null
	topology.tasks: null
	# 消息超时事件，如果超时，消息被认为是失败的
	topology.message.timeout.secs: 30
	topology.skip.missing.kryo.registrations: false
	topology.max.task.parallelism: null
	topology.max.spout.pending: null
	topology.state.synchronization.timeout.secs: 60
	topology.stats.sample.rate: 0.05
	topology.builtin.metrics.bucket.size.secs: 60
	topology.fall.back.on.java.serialization: true
	topology.worker.childopts: null
	topology.executor.receive.buffer.size: 1024
	topology.executor.send.buffer.size: 1024
	topology.receiver.buffer.size: 8 # 设置过高会导致很多问题，如心跳线程饿死，吞吐量大幅下跌
	topology.transfer.buffer.size: 1024
	topology.tick.tuple.freq.secs: null
	topology.worker.shared.thread.pool.size: 4
	topology.disruptor.wait.strategy: "com.lmax.disruptor.BlockingWaitStrategy"
	topology.spout.wait.strategy: "backtype.storm.spout.SleepSpoutWaitStratege"
	topology.sleep.spout.wait.strategy.time.ms: 1
	topology.error.throttle.interval.secs: 10
	topology.max.error.report.per.interval: 5
	topology.kryo.factory: "backtype.storm.serialization.DefaultKryoFactory"
	topology.tuple.serializer: "backtype.storm.serialization.types.ListDelegateSerializer"
	topology.trident.batch.emit.interval.millis: 500

	dev.zookeeper.path: "/tmp/dev-storm-zookeeper"
     #+END_SRC
*** storm.yaml
    修改 STORM_HOME 目录下的 conf/storm.yaml 文件，可以覆盖 Storm 配置的默认值。

    以下是一些必须设置的
    #+BEGIN_SRC conf
      # zookeeper 集群列表，如果端口不同，还需设置 "storm.zookeeper.port"
      storm.zookeeper.servers:
	  - "111.222.333.444"
	  - "x.x.x.x"
      # Nimbus 和 Supervisor 存储状态信息的数据
      storm.local.dir: "/mnt/storm"
      #  Storm 本地库的路径，一般不需要设置
      # java.library.path:
      # 主控节点
      nimbus.host: "1.1.1.1"
      # 对于每个工作节点，可以通过该配置项来设置节点上运行多少各Worker。
      supervisor.slots.ports:
	  - 6700
	  - 6701
	  - ...
    #+END_SRC
