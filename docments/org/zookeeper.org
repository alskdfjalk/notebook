* 基本原理
** 数据模型
   节点之间形成一个树形结构，类似 *nix 下的文件系统
** 节点概念
*** ZNode
    1) Regular ZNode: 常规型ZNode，用户需要显式的创建、删除
    2) Ephemeral ZNode: 临时性ZNode，用户创建它之后，可以显式的删除，也可以在创建它的Session结束后，
       由ZooKeeper Server自动删除
*** Session
    1) Client与ZooKeeper之间的通信，需要创建一个Session，这个Session会有一个超时时间。
    2) 实际应用中，如果Client与Server之间的通信足够频繁，Session的维护就不需要其他额外的消息了。否则，
       ZooKeeper Client会每 t/3 ms 发一次心跳给Server，如果Client 2t/3 ms 没收到来自Server的回应，就会
       切换到一个新的ZooKeeper Server上。这里t是用户配置的Session的超时时间。
*** Watcher
    ZooKeeper支持一种Watch的操作，Client可以在某个ZNode上设置一个Watcher，来Watch该ZNode上的变化。
    如果有相应变化，就会出发Watcher，把相应的事件通知给设置Watcher的Client。该Watcher时一次性的，触发
    一次就会被取消。
** ZooKeeper特性
*** 读、写（更新）模式
    1） 读：从任何一个ZooKeeper Server读
    2） 写：先转发到Leader，然后由Leader通过ZooKeeper中的原子广播协议，将请求广播给
    所有的Follower，Leader收到一半以上的写成功的Ack后，就认为该写成功了，就会将该写进行持久化，
    并告诉客户端写成功了。
*** WAL(Write-Ahead-Log)和Snapshot
    1）每一个更新操作，ZooKeeper都会先写WAL，然后再对内存中的数据做更新，然后向Client通知更新结果。
    2）定期将内存中的目录树进行Snapshot，落地到磁盘上，这个跟HDFS中的FSImage是比较类似的。
	1.为了数据的持久化
	2.加快重启之后的恢复速度
*** FIFO(first in first out)
    所有操作都是遵循FIFO的，这一特性是由下面两个基本特性来保证的：
    1. ZooKeeper Client和Server是基于TCP通信的，TCP保证了C/S之间传输包的顺序。
    2. S执行客户端请求也是严格按照FIFO顺序的。
** 典型应用场景
   [[http://blog.csdn.net/xinguan1267/article/details/38422149][应用场景讲解使用方式、原理]]
