
Hadoop下载地址 http://mirrors.hust.edu.cn/apache/hadoop/common/hadoop-2.6.2/hadoop-2.6.2-src.tar.gz 

返回[[Hadoop]]

== 授权 == 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License. See accompanying LICENSE file.
  
== Setting up a Single Node Cluster. ==

=== Purpose ===

     This document describes how to set up and configure a single-node Hadoop
     installation so that you can quickly perform simple operations using Hadoop
     MapReduce and the Hadoop Distributed File System (HDFS).
     
     跟随本文档来了解如何配置一个单节点的hadoop环境

=== Prerequisites(依赖) ===

==== Supported Platforms(平台依赖) ====

    # GNU/Linux is supported as a development and production platform.Hadoop has been demonstrated on GNU/Linux clusters with 2000 nodes.
    - Windows is also a supported platform but the followings steps are for Linux only. To set up Hadoop on Windows, see [[http://wiki.apache.org/hadoop/Hadoop2OnWindows|wiki page.]]
      
      对linux的支持比windows好，windows可以用来作为测试环境使用。

==== Required Software(软件依赖) ====

* Required software for Linux include
  # Java must be installed. Recommended Java versions are described [[http://wiki.apache.org/hadoop/HadoopJavaVersions|HadoopJavaVersions]]
  - ssh must be installed and sshd must be running to use the Hadoop scripts that manage remote Hadoop daemons.
       
       必须安装JAVA
       必须安装sshd, Hadoop会使用ssh来远程管理进程

* Installing Software
  If your cluster doesn't have the requisite software you will need to install it.

       如果没有安装上述服务，可以使用如下命令安装（ubuntu示例）
	
	{{{
	  For example on Ubuntu Linux:
	
		$ sudo apt-get install ssh
		$ sudo apt-get install rsync
	}}}

* Download
  * To get a Hadoop distribution, download a recent stable release from one of
  the [[http://www.apache.org/dyn/closer.cgi/hadoop/common/|Apache Download Mirrors]]
  
        Hadoop下载地址 [[http://www.apache.org/dyn/closer.cgi/hadoop/common/|Apache Download Mirrors]]
        <br/>本人安装的版本是： http://apache.fayea.com/hadoop/common/current/hadoop-2.7.1.tar.gz

* Prepare to Start the Hadoop Cluster<br/>
  * Unpack the downloaded Hadoop distribution. In the distribution, edit
  the file <<<etc/hadoop/hadoop-env.sh>>> to define some parameters as
  follows:<br/>
	{{{
        	解压hadoop包，编辑etc/hadoop/hadoop-env.sh
        	
		# set to the root of your Java installation
		export JAVA_HOME=/usr/java/latest

		# Assuming your installation directory is /usr/local/hadoop
		export HADOOP_PREFIX=/usr/local/hadoop
	}}}
  * Try the following command:
	{{{
		$ bin/hadoop
	}}}
  * This will display the usage documentation for the hadoop script.<br/>
 
* Now you are ready to start your Hadoop cluster in one of the three supported
  modes:
   * Standalone Operation - Local (Standalone) Mode
   * Pseudo-Distributed Operation - Pseudo-Distributed Mode
   * Fully-Distributed Operation - Fully-Distributed Mode

==== Standalone Operation ====
      By default, Hadoop is configured to run in a non-distributed mode, as a
      single Java process. This is useful for debugging.<br/>
      Hadoop默认会以一个单进程并且单节点的方式运行，可以便于debug

      The following example copies the unpacked conf directory to use as input
      and then finds and displays every match of the given regular expression.
      Output is written to the given output directory.<br/>
      例子中将所有xml配置复制到input目录，并且用给出的正则去匹配，打印输出并且
      将输出写入output目录
{{{
	$ mkdir input
  	$ cp etc/hadoop/*.xml input
  	$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-${project.version}.jar grep input output 'dfs[a-z.]+'
  	$ cat output/*
}}}
----

* Pseudo-Distributed Operation
 
        Hadoop can also be run on a single-node in a pseudo-distributed mode
        where each Hadoop daemon runs in a separate Java process.<br/>
        Hadoop可以在"伪分布式"的单节点中运行，会启动多个独立的java进程。
   
  # Configuration<br/>
    # Use the following "etc/hadoop/core-site.xml":
       {{{
	<configuration>
	    <property>
	        <name>fs.defaultFS</name>
	        <value>hdfs://localhost:9000</value>
	    </property>
	</configuration>
       }}}
    # etc/hadoop/hdfs-site.xml:
	{{{
	<configuration>
	    <property>
	        <name>dfs.replication</name>
	        <value>1</value>
	    </property>
	</configuration>
	}}}
    # Setup passphraseless ssh<br/>
        Now check that you can ssh to the localhost without a passphrase:<br/>
        检查ssh服务是否正常
        {{{
        $ ssh localhost
        }}}
        If you cannot ssh to localhost without a passphrase, execute the following commands:
        <br/>配置本机的无密码登录
        {{{
        $ ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa
        $ cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys
        }}}
  # Execution<br/>
	The following instructions are to run a MapReduce job locally. 
	If you want to execute a job on YARN, see YARN on Single Node.<br/>
	跟随以下步骤来本地运行MapReduce
    # Format the filesystem:
  	{{{
  	$ # 格式化文件系统
  	$ bin/hdfs namenode -format
	}}}
    # Start NameNode daemon and DataNode daemon:
    	{{{
  	$ sbin/start-dfs.sh
	}}}
    `The hadoop daemon log output is written to the ${HADOOP_LOG_DIR} directory (defaults to ${HADOOP_HOME}/logs).`
    # Browse the web interface for the NameNode; by default it is available at:
   	{{{
  	NameNode - http://localhost:50070/
   	}}}
    # Make the HDFS directories required to execute MapReduce jobs:
    	{{{
    	$ bin/hdfs dfs -mkdir /user
    	$ bin/hdfs dfs -mkdir /user/<username>
  	}}}
    # Copy the input files into the distributed filesystem:
    	{{{
    	$ bin/hdfs dfs -put etc/hadoop input
  	}}}
    # Run some of the examples provided:
    	{{{
    	$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-${project.version}.jar grep input output 'dfs[a-z.]+'
  	}}}
    # Examine the output files:<br/>
        Copy the output files from the distributed filesystem to the local
        filesystem and examine them:
	{{{
  	$ bin/hdfs dfs -get output output
  	$ cat output/*
	}}}
        or
        View the output files on the distributed filesystem:
  	{{{
  	$ bin/hdfs dfs -cat output/*
	}}}
    # When you're done, stop the daemons with:
  	{{{
  	$ sbin/stop-dfs.sh
	}}}
* YARN on Single Node<br/>
  You can run a MapReduce job on YARN in a pseudo-distributed mode by setting
  a few parameters and running ResourceManager daemon and NodeManager daemon
  in addition.<br/>
  The following instructions assume that 1. ~ 4. steps of
  Execution the above instructions are already executed.
  # Configure parameters as follows<br/>
	etc/hadoop/mapred-site.xml:
	{{{
	<configuration>
	    <property>
	        <name>mapreduce.framework.name</name>
	        <value>yarn</value>
	    </property>
	</configuration>
	}}}
        etc/hadoop/yarn-site.xml:
	{{{
	<configuration>
	    <property>
	        <name>yarn.nodemanager.aux-services</name>
	        <value>mapreduce_shuffle</value>
	    </property>
	</configuration>
	}}}
  # Start ResourceManager daemon and NodeManager daemon:
  	{{{
  	$ sbin/start-yarn.sh
	}}}
  # Browse the web interface for the ResourceManager; by default it is available at:
 	 {{{
        * ResourceManager - http://localhost:8088/
 	 }}}
  # Run a MapReduce job.
  # When you're done, stop the daemons with:
  	{{{
  	$ sbin/stop-yarn.sh
	}}}

* Fully-Distributed Operation
  For information on setting up fully-distributed, non-trivial clusters
  see ./ClusterSetup.html Cluster Setup.
= README =
{{{
	For the latest information about Hadoop, please visit our website at:
	
	   http://hadoop.apache.org/core/
	
	and our wiki, at:
	
	   http://wiki.apache.org/hadoop/
	
	This distribution includes cryptographic software.  The country in 
	which you currently reside may have restrictions on the import, 
	possession, use, and/or re-export to another country, of 
	encryption software.  BEFORE using any encryption software, please 
	check your country's laws, regulations and policies concerning the
	import, possession, or use, and re-export of encryption software, to 
	see if this is permitted.  See <http://www.wassenaar.org/> for more
	information.
	
	该应用(hadoop)包含了加密软件(模块、组件). 你所在的地区可能会限制
	该类软件的使用。在把非公开软件使用和／或重新发布给其他地址时，
	需要确保你所在的地区的法律允许。
	
  }}}
	授权详情请访问： http://www.wassenaar.org
  {{{
	The U.S. Government Department of Commerce, Bureau of Industry and
	Security (BIS), has classified this software as Export Commodity 
	Control Number (ECCN) 5D002.C.1, which includes information security
	software using or performing cryptographic functions with asymmetric
	algorithms.  The form and manner of this Apache Software Foundation
	distribution makes it eligible for export under the License Exception
	ENC Technology 
	----------------------------------------------------------------------------------
	Building components separately
	各个组件的构建
	
	If you are building a submodule directory, all the hadoop dependencies this
	submodule has will be resolved as all other 3rd party dependencies. This is,
	from the Maven cache or from a Maven repository (if not available in the cache
	or the SNAPSHOT 'timed out').
	An alternative is to run 'mvn install -DskipTests' from Hadoop source top
	level once; and then work from the submodule. Keep in mind that SNAPSHOTs
	time out after a while, using the Maven '-nsu' will stop Maven from trying
	to update SNAPSHOTs from external repos.
	
	如果你要构建一个项目外的模块作为当前项目的子模块，Hadoop会负责从maven库中解决
	所有第三方依赖
	这里有一个替代方法是在Hadoop源码根目录执行一次"mvn install -DskipTests"，
	然后就会在自模块中运行.如果使用'-nsu'选项,将会禁止更新maven中其他repos的快照，
	否则，运行一段时间后会超时。
	
	----------------------------------------------------------------------------------
	Protocol Buffer compiler
	相当于一个消息格式的协议的编译器（解释器）
    }}}
	Protocol Buffer 介绍： http://www.cnblogs.com/stephen-liu74/archive/2013/01/02/2841485.html
	<br/>Protocol Buffer compiler 下载地址: https://github.com/google/protobuf
    {{{
	
	The version of Protocol Buffer compiler, protoc, must match the version of the
	protobuf JAR.
	该编译器版本必须和（Java）版本匹配
	
	If you have multiple versions of protoc in your system, you can set in your 
	build shell the HADOOP_PROTOC_PATH environment variable to point to the one you 
	want to use for the Hadoop build. If you don't define this environment variable,
	protoc is looked up in the PATH.
	如果有安装了多个protoc版本，可以通过配置HADOOP_PROTOC_PATH环境变量来指定要使用
	哪一个版本，如果没有指定，默认将使用PATH中的版本
	----------------------------------------------------------------------------------
	Importing projects to eclipse
	
	When you import the project to eclipse, install hadoop-maven-plugins at first.
	(Eclipse 是一个开放源代码的、基于Java的可扩展开发平台。相当于一个即成开发环境。
	就其本身而言，它只是一个框架和一组服务，用于通过插件组件构建开发环境。幸运的是，
	Eclipse 附带了一个标准的插件集，包括Java开发工具（Java Development Kit，JDK）)
	如果项目中使用了eclipse，需要安装 hadoop-maven-plugins, 安装方式：
	
	  $ cd hadoop-maven-plugins
	  $ mvn install
	
	Then, generate eclipse project files.
	然后生成eclipse的项目文件
	
	  $ mvn eclipse:eclipse -DskipTests
	
	At last, import to eclipse by specifying the root directory of the project via
	[File] > [Import] > [Existing Projects into Workspace].
	图形界面的操作，滚粗，直接无视。
	
	----------------------------------------------------------------------------------
	Building distributions:
	开始构建／安装
	
	Create binary distribution without native code and without documentation:
	不使用原生代码，并且不需要文档的情况下构建一个二进制的分发包
	
	  $ mvn package -Pdist -DskipTests -Dtar
	
	Create binary distribution with native code and with documentation:
	与上一条相反，包含文档以及原生代码
	
	  $ mvn package -Pdist,native,docs -DskipTests -Dtar
	
	Create source distribution:
	创建一个源码分发包
	
	  $ mvn package -Psrc -DskipTests
	
	Create source and binary distributions with native code and documentation:
	创建一个包含原生代码和文档的源码及二进制包
	
	  $ mvn package -Pdist,native,docs,src -DskipTests -Dtar
	
	Create a local staging version of the website (in /tmp/hadoop-site)
	创建一个本地环境的站点
	
	  $ mvn clean site; mvn site:stage -DstagingDirectory=/tmp/hadoop-site
	
	----------------------------------------------------------------------------------
	Installing Hadoop
	终于要开始安装了啊，你妹啊
	
	Look for these HTML files after you build the document by the above commands.
	卧槽，还需要去别处看，你妹啊
	
	  * Single Node Setup:
	    hadoop-project-dist/hadoop-common/SingleCluster.html
	
	  * Cluster Setup:
	    hadoop-project-dist/hadoop-common/ClusterSetup.html
	    
	    你妹妹啊，路径根本就没有这个文件好不好
	    笔者只找到了这个：hadoop-2.6.2/hadoop-common-project/hadoop-common/src/site/apt/SingleCluster.apt.vm
	    为了保证本文档结构的完整性，上述文档内容请看结尾。
	
	----------------------------------------------------------------------------------
	
	Handling out of memory errors in builds
	
	----------------------------------------------------------------------------------
	
	If the build process fails with an out of memory error, you should be able to fix
	it by increasing the memory used by maven -which can be done via the environment
	variable MAVEN_OPTS.
	
	Here is an example setting to allocate between 256 and 512 MB of heap space to
	Maven
	
	export MAVEN_OPTS="-Xms256m -Xmx512m"
	
	----------------------------------------------------------------------------------
	
	Building on OS/X
	
	----------------------------------------------------------------------------------
	
	A one-time manual step is required to enable building Hadoop OS X with Java 7
	every time the JDK is updated.
	see: https://issues.apache.org/jira/browse/HADOOP-9350
	
	$ sudo mkdir `/usr/libexec/java_home`/Classes
	$ sudo ln -s `/usr/libexec/java_home`/lib/tools.jar `/usr/libexec/java_home`/Classes/classes.jar
	
	----------------------------------------------------------------------------------
	
	Building on Windows
	
	----------------------------------------------------------------------------------
	Requirements:
	
	* Windows System
	* JDK 1.6+
	* Maven 3.0 or later
	* Findbugs 1.3.9 (if running findbugs)
	* ProtocolBuffer 2.5.0
	* CMake 2.6 or newer
	* Windows SDK or Visual Studio 2010 Professional
	* Unix command-line tools from GnuWin32 or Cygwin: sh, mkdir, rm, cp, tar, gzip
	* zlib headers (if building native code bindings for zlib)
	* Internet connection for first build (to fetch all Maven and Hadoop dependencies)
	
	If using Visual Studio, it must be Visual Studio 2010 Professional (not 2012).
	Do not use Visual Studio Express.  It does not support compiling for 64-bit,
	which is problematic if running a 64-bit system.  The Windows SDK is free to
	download here:
	
	http://www.microsoft.com/en-us/download/details.aspx?id=8279
	
	----------------------------------------------------------------------------------
	Building:
	
	Keep the source code tree in a short path to avoid running into problems related
	to Windows maximum path length limitation.  (For example, C:\hdc).
	
	Run builds from a Windows SDK Command Prompt.  (Start, All Programs,
	Microsoft Windows SDK v7.1, Windows SDK 7.1 Command Prompt.)
	
	JAVA_HOME must be set, and the path must not contain spaces.  If the full path
	would contain spaces, then use the Windows short path instead.
	
	You must set the Platform environment variable to either x64 or Win32 depending
	on whether you're running a 64-bit or 32-bit system.  Note that this is
	case-sensitive.  It must be "Platform", not "PLATFORM" or "platform".
	Environment variables on Windows are usually case-insensitive, but Maven treats
	them as case-sensitive.  Failure to set this environment variable correctly will
	cause msbuild to fail while building the native code in hadoop-common.
	
	set Platform=x64 (when building on a 64-bit system)
	set Platform=Win32 (when building on a 32-bit system)
	
	Several tests require that the user must have the Create Symbolic Links
	privilege.
	
	All Maven goals are the same as described above with the exception that
	native code is built by enabling the 'native-win' Maven profile. -Pnative-win 
	is enabled by default when building on Windows since the native components 
	are required (not optional) on Windows.
	
	If native code bindings for zlib are required, then the zlib headers must be
	deployed on the build machine.  Set the ZLIB_HOME environment variable to the
	directory containing the headers.
	
	set ZLIB_HOME=C:\zlib-1.2.7
	
	At runtime, zlib1.dll must be accessible on the PATH.  Hadoop has been tested
	with zlib 1.2.7, built using Visual Studio 2010 out of contrib\vstudio\vc10 in
	the zlib 1.2.7 source tree.
	
	http://www.zlib.net/
	
	----------------------------------------------------------------------------------
	Building distributions:
	
	 * Build distribution with native code    : mvn package [-Pdist][-Pdocs][-Psrc][-Dtar]
  }}}
