* The Docker user guide
** 目的
   1. docker中运行你的应用程序
   2. 运行你自己的容器
   3. 创建docker镜像
   4. 分享docker镜像
** Docker Hub
*** 地址
    https://hub.docker.com/
** Docker 应用"Hello world"
*** 在容器中输出hello world
    #+BEGIN_SRC shell
      sudo docker run centos:6 echo 'hello world'
      hello world
    #+END_SRC
    1. 命令解释
    2. docker run 组合会运行容器
    3. centos:6 指定镜像版本（如果本地没有找到镜像，则从docker.com查找
    4. 容器中执行的命令
*** 交互式的容器
    #+BEGIN_SRC shell
      sudo docker run -t -i centos:6 /bin/bash
      root@af8bae53bdd3:/#
    #+END_SRC
    1. 选项解释：

       -t 表示在新容器内指定一个伪终端或终端

       -i 表示允许对容器内的(STDIN)进行交互
*** 容器成为守护进程
    1. 启动进程
	#+BEGIN_SRC shell
	  sudo docker run -d centos:6 bash -c "while true; do echo hello world; done"
	  1e5535038e285177d5214659a068137486f96ee5c2e85a4ac52dc83f2ebe4147(容器ID（Container ID)
	#+END_SRC
    2. 容器进程查看
	#+BEGIN_SRC shell
	  sudo docker ps
	  CONTAINER ID  IMAGE         COMMAND            CREATED       STATUS     PORTS   NAMES
	  7d045853d31b centos:6 "bash -c 'while true;" 7 minutes ago  Up 7 minutes    furious_wozniak
	#+END_SRC
    3. 查看容器内应用的输出
       #+BEGIN_SRC shell
	 sudo docker logs furious_wozniak
       #+END_SRC
    4. 关闭容器
       #+BEGIN_SRC shell
	 sudo docker stop furious_wozniak
       #+END_SRC
** Docker 运行实例
*** 启动一个实例
    #+BEGIN_SRC shell
      sudo docker run -d -P training/webapp python app.py
    #+END_SRC
    -P 选项通知 Docker 将容器内部使用的网络端口映射到我们使用的主机上

    本例中指定了training/web 镜像。这个镜像已经包含了简单的Flask web 应用

*** 查看状态
     #+BEGIN_SRC shell
       $ sudo docker ps -l
       # 多出一个 0.0.0.0:32768->5000/tcp
       # 5000端口是镜像预定义的端口
       # 可以在构建容器时指定默认端口
     #+END_SRC

*** 监听在其他端口
    #+BEGIN_SRC shell
      sudo docker run -d -p 5000:5000 training/webapp python app.py
    #+END_SRC

*** 查看网络端口快捷方式
    #+BEGIN_SRC shell
      $ sudo docker port xxxxxxxxxx 5000
    #+END_SRC
*** 查看WEB应用日志
    #+BEGIN_SRC shell
      $ sudo docker logs -f nostalgic_morse
      ,* Running on http://0.0.0.0:5000/
      10.0.2.2 - - [23/May/2014 20:16:31] "GET / HTTP/1.1" 200 -
      10.0.2.2 - - [23/May/2014 20:16:31] "GET /favicon.ico HTTP/1.1" 404 -
    #+END_SRC
*** 查看WEB应用的进程
    #+BEGIN_SRC shell
      $ sudo docker top xxxxxx_xxx
    #+END_SRC
*** 查看docker容器的配置和状态信息
    #+BEGIN_SRC shell
      $ sudo docker inspect xxxxxxx_xxx
    #+END_SRC

    #+BEGIN_SRC shell
      sudo docker inspect -f '{{ .NetworkSettings.IPAddress }}' nostalgic_morse
    #+END_SRC
*** 重启WEB应用容器
    #+BEGIN_SRC shell
      $ sudo docker restart xxxxxx_xxx
    #+END_SRC
*** 删除容器
    #+BEGIN_SRC shell
      $ sudo docker rm xxxxxx_xxxx
    #+END_SRC

    注意：不能删除正在运行中的容器，必须先stop
** Docker 镜像
*** 公共镜像
**** 在主机上列出镜像列表
    列出本地可以使用的镜像
    #+BEGIN_SRC shell
      $ sudo docker images
    #+END_SRC
**** 获取一个新的镜像
    #+BEGIN_SRC shell
      $ sudo docker pull centos
    #+END_SRC
**** 搜索镜像
    #+BEGIN_SRC shell
      $ sudo docker search centos
    #+END_SRC
*** 自定义镜像
**** 更新并且提交更改
     #+BEGIN_SRC shell
       $ sudo docker run -t -i training/sinatra /bin/bash
       root@0b2616b0e5a8:/#
       注意：已创建容器ID 0b2616b0e5a8，需要指定这个ID来提交新的更改
     #+END_SRC

     修改之后提交

     #+BEGIN_SRC shell
       $ sudo docker commit -m="Added json gem" -a="Kate Smith" 0b2616b0e5a8 ouruser/sinatra:v2
       4f177bd27a9ff0f6dc2a830403925b5360bfe0b93d476f7fc3231110e7f71b1c
     #+END_SRC

     -m 参数来指定提交信息

     -a 参数来指定提交人
**** 使用 Dockerfile 构建镜像
     1. 准备路径
	#+BEGIN_SRC shell
	  $ cd /tmp
	  $ mkdir sinatra
	  $ cd sinatra
	  $ touch Dockerfile
	#+END_SRC
     2. 编写配置

	在Dockerfile添加如下内容
	#+BEGIN_SRC conf
	  # This is a comment
	  FROM fedora
	  MAINTAINER CJ <zhangyafeng097@emao.com>
	  RUN dnf install emacs -y
	#+END_SRC
     3. 执行打包（构建）
	#+BEGIN_SRC shell
	  $ sudo docker build -t lala/sinatra:v5 /tmp/sinatra
	#+END_SRC

     4. 注意

	/*与存储程序驱动无关，镜像不能超过127层。这是一种全局设置，为了是从整体上来优化镜像的大小。*/
