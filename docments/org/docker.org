* The Docker user guide
** 目的
   1. docker中运行你的应用程序
   2. 运行你自己的容器
   3. 创建docker镜像
   4. 分享docker镜像
** Docker Hub
*** 地址
    https://hub.docker.com/
** Docker 应用"Hello world"
*** 在容器中输出hello world
    #+BEGIN_SRC shell
      sudo docker run centos:6 echo 'hello world'
      hello world
    #+END_SRC
    1. 命令解释
    2. docker run 组合会运行容器
    3. centos:6 指定镜像版本（如果本地没有找到镜像，则从docker.com查找
    4. 容器中执行的命令
*** 交互式的容器
    #+BEGIN_SRC shell
      sudo docker run -t -i centos:6 /bin/bash
      root@af8bae53bdd3:/#
    #+END_SRC
    1. 选项解释：

       -t 表示在新容器内指定一个伪终端或终端

       -i 表示允许对容器内的(STDIN)进行交互
*** 容器成为守护进程
    1. 启动进程
	#+BEGIN_SRC shell
	  sudo docker run -d centos:6 bash -c "while true; do echo hello world; done"
	  1e5535038e285177d5214659a068137486f96ee5c2e85a4ac52dc83f2ebe4147(容器ID（Container ID)
	#+END_SRC
    2. 容器进程查看
	#+BEGIN_SRC shell
	  sudo docker ps
	  CONTAINER ID  IMAGE         COMMAND            CREATED       STATUS     PORTS   NAMES
	  7d045853d31b centos:6 "bash -c 'while true;" 7 minutes ago  Up 7 minutes    furious_wozniak
	#+END_SRC
    3. 查看容器内应用的输出
       #+BEGIN_SRC shell
	 sudo docker logs furious_wozniak
       #+END_SRC
    4. 关闭容器
       #+BEGIN_SRC shell
	 sudo docker stop furious_wozniak
       #+END_SRC
** Docker 运行实例
*** 启动一个实例
    #+BEGIN_SRC shell
      sudo docker run -d -P training/webapp python app.py
    #+END_SRC
    -P 选项通知 Docker 将容器内部使用的网络端口映射到我们使用的主机上

    本例中指定了training/web 镜像。这个镜像已经包含了简单的Flask web 应用

*** 查看状态
     #+BEGIN_SRC shell
       $ sudo docker ps -l
       # 多出一个 0.0.0.0:32768->5000/tcp
       # 5000端口是镜像预定义的端口
       # 可以在构建容器时指定默认端口
     #+END_SRC

*** 监听在其他端口
    #+BEGIN_SRC shell
      sudo docker run -d -p 5000:5000 training/webapp python app.py
    #+END_SRC

*** 查看网络端口快捷方式
    #+BEGIN_SRC shell
      $ sudo docker port xxxxxxxxxx 5000
    #+END_SRC
*** 查看WEB应用日志
    #+BEGIN_SRC shell
      $ sudo docker logs -f nostalgic_morse
      ,* Running on http://0.0.0.0:5000/
      10.0.2.2 - - [23/May/2014 20:16:31] "GET / HTTP/1.1" 200 -
      10.0.2.2 - - [23/May/2014 20:16:31] "GET /favicon.ico HTTP/1.1" 404 -
    #+END_SRC
*** 查看WEB应用的进程
    #+BEGIN_SRC shell
      $ sudo docker top xxxxxx_xxx
    #+END_SRC
*** 查看docker容器的配置和状态信息
    #+BEGIN_SRC shell
      $ sudo docker inspect xxxxxxx_xxx
    #+END_SRC

    #+BEGIN_SRC shell
      sudo docker inspect -f '{{ .NetworkSettings.IPAddress }}' nostalgic_morse
    #+END_SRC
*** 重启WEB应用容器
    #+BEGIN_SRC shell
      $ sudo docker restart xxxxxx_xxx
    #+END_SRC
*** 删除容器
    #+BEGIN_SRC shell
      $ sudo docker rm xxxxxx_xxxx
    #+END_SRC

    注意：不能删除正在运行中的容器，必须先stop
** Docker 镜像
*** 公共镜像
***** 在主机上列出镜像列表
    列出本地可以使用的镜像
    #+BEGIN_SRC shell
      $ sudo docker images
    #+END_SRC
***** 获取一个新的镜像
    #+BEGIN_SRC shell
      $ sudo docker pull centos
    #+END_SRC
***** 搜索镜像
    #+BEGIN_SRC shell
      $ sudo docker search centos
    #+END_SRC
*** 自定义镜像
***** 更新并且提交更改
     #+BEGIN_SRC shell
       $ sudo docker run -t -i training/sinatra /bin/bash
       root@0b2616b0e5a8:/#
       注意：已创建容器ID 0b2616b0e5a8，需要指定这个ID来提交新的更改
     #+END_SRC

     修改之后提交

     #+BEGIN_SRC shell
       $ sudo docker commit -m="Added json gem" -a="Kate Smith" 0b2616b0e5a8 ouruser/sinatra:v2
       4f177bd27a9ff0f6dc2a830403925b5360bfe0b93d476f7fc3231110e7f71b1c
     #+END_SRC

     -m 参数来指定提交信息

     -a 参数来指定提交人
***** 使用 Dockerfile 构建镜像
     1. 准备路径
	#+BEGIN_SRC shell
	  $ cd /tmp
	  $ mkdir sinatra
	  $ cd sinatra
	  $ touch Dockerfile
	#+END_SRC
     2. 编写配置

	在Dockerfile添加如下内容
	#+BEGIN_SRC conf
	  # This is a comment
	  FROM fedora
	  MAINTAINER CJ <zhangyafeng097@emao.com>
	  RUN dnf install emacs -y
	#+END_SRC
     3. 执行打包（构建）
	#+BEGIN_SRC shell
	  $ sudo docker build -t lala/sinatra:v5 /tmp/sinatra
	#+END_SRC

     4. 注意

	/*与存储程序驱动无关，镜像不能超过127层。这是一种全局设置，为了是从整体上来优化镜像的大小。*/

     5. Dockerfile资料
	https://docs.docker.com/userguide/level1/
*** 镜像标签(tag)
***** 添加标签
     #+BEGIN_SRC shell
       $ docker tag 5db5f8471261 ouruser/sinatra:devel
       docker tag 需要使用镜像ID，这里是 5db5f8471261，用户名、镜像源和新的标签名。
     #+END_SRC
***** 查看某镜像的标签
     #+BEGIN_SRC shell
       $ docker images ouruser/sinatra
       REPOSITORY          TAG     IMAGE ID      CREATED        VIRTUAL SIZE
       ouruser/sinatra     latest  5db5f8471261  11 hours ago   446.7 MB
       ouruser/sinatra     devel   5db5f8471261  11 hours ago   446.7 MB
       ouruser/sinatra     v2      5db5f8471261  11 hours ago   446.7 MB
     #+END_SRC
** Docker 连接容器
*** 端口映射
    1. 指定udp映射
       #+BEGIN_SRC shell
	 $ sudo docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py
       #+END_SRC
*** 容器连接
***** 概念
     端口映射并不是唯一把docker连接到另一个容器的方法。docker有一个连接系统允许将多个容器连接在一起，
     共享连接信息。docker连接会创建一个父子关系，其中父容器可以看到子容器的信息。
***** 容器命名
     #+BEGIN_SRC shell
       $ sudo docker run -d -P --name web training/webapp python app.py
     #+END_SRC
***** 获取容器名字
     #+BEGIN_SRC shell
       $ sudo docker inspect -f "{{ .Name }}" aed84ee21bde
       /web
     #+END_SRC
***** 容器连接
     连接允许容器之间可见并且安全地进行通信。使用--link创建连接。我们创建一个新容器，这个容器是数据库。
     1. 创建一个db容器
	#+BEGIN_SRC shell
	  $ sudo docker run -d --name db training/postgres
	#+END_SRC
     2. 创建一个web容器连接db容器
	#+BEGIN_SRC shell
	  $ sudo docker run -d -P --name web --link db:db training/webapp python app.py
	  # --link name:alias
	#+END_SRC

* 原理(实现方式)—— namespace
** 目的
   了解docker的实现机制会有助于用更合适的方式来使用docker
** 资源隔离标志位(20多种CLONE_*)
    | namespace | 系统调用参数  | 隔离内容                   |
    |-----------+---------------+----------------------------|
    | UTS       | CLONE_NEWUTS  | 主机名与域名               |
    | IPC       | CLONE_NEWIPC  | 信号量、消息队列和共享内存 |
    | PID       | CLONE_NEWPID  | 进程编号                   |
    | Network   | CLONE_NEWNET  | 网络设备、网络栈、端口     |
    | Mount     | CLONE_NEWNS   | 挂载点                     |
    | User      | CLONE_NEWUSER | 用户和用户组               |
** /proc/[pid]/ns 目录
    从3.8内核开始，可以在该目录下看到指向不同namespace号的文件如：
    #+BEGIN_SRC shell
      [cj @ office 12:39 ~]$ ls -l /proc/$$/ns
      总用量 0
      lrwxrwxrwx 1 cj cj 0 2月  23 12:39 ipc -> ipc:[4026531839]
      lrwxrwxrwx 1 cj cj 0 2月  23 12:39 mnt -> mnt:[4026531840]
      lrwxrwxrwx 1 cj cj 0 2月  23 12:39 net -> net:[4026531957]
      lrwxrwxrwx 1 cj cj 0 2月  23 12:39 pid -> pid:[4026531836]
      lrwxrwxrwx 1 cj cj 0 2月  23 12:39 user -> user:[4026531837]
      lrwxrwxrwx 1 cj cj 0 2月  23 12:39 uts -> uts:[4026531838]
    #+END_SRC
** namespace的四种API
*** clone()
    1. 通过clone()在创建新进程的同时创建namespace
       #+BEGIN_SRC c
	 int clone(int (*child_func)(void *), void *child_stack, int flags, void *arg);
	 // child_func 传入子进程运行的程序主函数
	 // child_stack 传入子进程使用的栈空间
	 // flags 表示使用哪些CLONE_*标志位，与namespace相关的已列在上表中
	 // args 用于传入用户参数
       #+END_SRC
*** setns() 加入一个已经存在的namespace
    在 Docker 中，使用 docker exec 在已经运行着的容器中执行一个新的命令，就需要用到该方法。
    #+BEGIN_SRC C
      int setns(int fd, int nstype);
      // 参数 fd 表示要加入 namespace 的文件描述符。它是一个指向 /proc/[pid]/ns 目录的文件喵舒服。
      // 参数 nstype 让调用者可以检查mespace类型是否符合实际要求。参数为 0 时 不检查。
    #+END_SRC

    示例：
    #+BEGIN_SRC shell
      touch ~/uts
      mount --bind /proc/27514/ns/utf ~/uts
    #+END_SRC
    #+BEGIN_SRC c
      fd = open(argv[1], O_RDONLY);
      setns(fd, 0);
      execvp(argv[2], &argv[2]);
    #+END_SRC

*** unshare()
    同 clone()，但运行在原先的进程上，不需要启动一个新进程。(在Docker中并没有使用这个接口）
    #+BEGIN_SRC c
      int unshare(int flags);
    #+END_SRC

*** fork()
    就这么点事儿，fork后看返回值来确定自己是否是子进程，然后做不同的操作 - -|||

** Docker 相关的资源隔离标志位
*** UTS(UNIX Time-sharing System) namespace
    提供了主机名和域名的隔离，这样才能在网络上被当作一个独立的节点，而非宿主机上的一个进程。
    在Docker中，每个镜像基本都以自身提供的服务名称来命名镜像的hostname，且不会对宿主机产生任何影响，原理就是利用UTS namespace
    #+BEGIN_SRC c
	    #define _GNU_SOURCE
	    #include <sys/types.h>
	    #include <sys/wait.h>
	    #include <stdio.h>
	    #include <sched.h>
	    #include <signal.h>
	    #include <unistd.h>

	    #define STACK_SIZE (1024 * 1024)

	    static char child_stack[STACK_SIZE];
	    char * const child_args[] = {
		    "/bin/bash",
		    NULL,
	    };

	    int child_main(void *args)
	    {
		    printf("在子进程中!\n");
		    sethostname("NewNamespace", 12);
		    execv(child_args[0], child_args);
		    return 1;
	    }

	    int main()
	    {
		    printf("程序开始：\n");
		    int child_pid = clone(child_main, child_stack + STACK_SIZE,
					  CLONE_NEWUTS | SIGCHLD, NULL);
		    if (0 > child_pid)
			    perror("不知到为什么错了");
		    waitpid(child_pid, NULL, 0);
		    puts("已退出");
		    return 0;
	    }
    #+END_SRC

*** IPC(Inter-Process Communication) namespace
    进程间通信涉及的IPC资源包括常见的信号量、消息队列和共享内存。
    申请IPC资源就申请了一个全局唯一的32位ID，所以IPC namespace中实际上包含了系统IPC标识符以及实现POSIX消息队列的文件系统。
    在同一个IPC namespace下的进程彼此可见，不同IPC namespace下的进程则互相不可见。

    #+BEGIN_SRC shell
      $ ipcmk -Q    # 创建一个message queue
      $ ipcs -q     # 查看已经开启的 message queue
    #+END_SRC
    #+BEGIN_SRC c
      #define _GNU_SOURCE
      #include <sys/types.h>
      #include <sys/wait.h>
      #include <stdio.h>
      #include <sched.h>
      #include <signal.h>
      #include <unistd.h>

      #define STACK_SIZE (1024 * 1024)

      static char child_stack[STACK_SIZE];
      char * const child_args[] = {
       "/bin/bash",
       NULL,
      };

      int child_main(void *args)
      {
       printf("在子进程中!\n");
       sethostname("NewNamespace", 12);
       execv(child_args[0], child_args);
       return 1;
      }

      int main()
      {
       printf("程序开始：\n");
       int child_pid = clone(child_main, child_stack + STACK_SIZE,
			     CLONE_NEWIPC | SIGCHLD | CLONE_NEWUTS, NULL);
       if (0 > child_pid)
	       perror("不知到为什么错了");
       waitpid(child_pid, NULL, 0);
       puts("已退出");
       return 0;
      }
    #+END_SRC
    #+BEGIN_SRC shell
      $ ipcs -q    # 查看已经开启的消息队列时已经看不到刚才创建的了, 实现了IPC的隔离。
    #+END_SRC

*** PID(Process ID) namespace
    隔离PID
    1. 每个PID namespace中的第一个进程“PID 1”，都会像传统Linux中的init进程一样拥有特权，起特殊作用。
    2. 一个namespace中的进程，不可能通过kill或ptrace影响父节点或者兄弟节点中的进程，因为其它节点的PID在这个namespace中没有任何意义
    3. 如果在新的PID namespace中重新挂载/proc文件系统，会发现其下只显示同一个PID namespace中的其它进程。
    4. 在root namespace中可以看到所有进程，并且递归包含所有子节点中的进程。

    扩展：
	外部监控Docker中运行的程序，监控Dockerdaemon所在的PID namespace下的所有进程机器子进程，如有需要，可以筛选检查。

    将上例中的代码修改如下：
    #+BEGIN_SRC c
      // [...]
      int child_pid = clone(child_main, child_stack + STAK_SIZE,
			    CLONE_NEWPID | CLONE_NEWIPC | CLONE_NEWUTS, | SIGHLD, NULL);
      // [...]
    #+END_SRC
    #+BEGIN_SRC shell 运行过程
      [cj @ office 17:08 ~/tmp]$ sudo ./a.out
      程序开始：
      在子进程中!
      [root @ NewNamespace 17:08 /home/cj/tmp]$ echo $$
      1
      [root @ NewNamespace 17:08 /home/cj/tmp]$ ps aux | grep a.out
      root     16032  0.0  0.0 233532  7336 pts/0    S    17:08   0:00 sudo ./a.out
      root     16033  0.0  0.0   5192   788 pts/0    S    17:08   0:00 ./a.out
      root     16213  0.0  0.0 114344  2352 pts/0    S+   17:08   0:00 grep --color=auto a.out
      [root @ NewNamespace 17:08 /home/cj/tmp]$ exit
      已退出
      [cj @ office 17:08 ~/tmp]$ echo $$
      13636
      [cj @ office 17:08 ~/tmp]$
    #+END_SRC

    /*但是，由于尚未对文件系统挂载点隔离，所以/proc目录还是可以读取到当前宿主机的所有进程状态*/

**** PID namespace 中的 init 进程
      1. 容器中需要一个类似宿主机的 init 进程来维护容器中的进程表
      2. 如果确实需要在一个Docker容器中运行多个进程，最先启动的命令进程应该是具有资源监控与回收等管理能力的，如 bash。
**** 信号与 init 进程
      1. init 进程的特权 —— 信号屏蔽
	 如果 init 中没有编写处理某个信号的代码逻辑，那么与 init 在同一个 PID namespace 下的进程（即使有超级权限）
	 发送给 init 的信号都会被屏蔽。（主要作用是防止 init 进程被误杀）
      2. 父节点发送给子节点的 SIGKILL 和 SIGSTOP，子节点的 init 会强制执行。(父节点可以终止子节点的进程）
      3. init 被销毁后，同一 namespace(PID) 中的其它进程也会接收到 SIGKILL。
	 理论上，该 PID namespace 将不存在，除非 /proc/[pid]/ns/pid 处于被挂载或者打开的状态，namespace就会
	 保留，但是也不能执行 setns() 、fork()，所以实际上也没有用了。
**** 挂载 proc 文件系统
      如果需要只能看到 PID namespace 本身应该看到的进程，需要重新挂载 /proc：
      #+BEGIN_SRC shell
	[cj @ office 18:08 ~/tmp]$ sudo ./a.out
	程序开始：
	在子进程中!
	[root @ NewNamespace 18:08 /home/cj/tmp]$ mount -t proc proc /proc
	[root @ NewNamespace 18:08 /home/cj/tmp]$ ps auxf
	USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
	root         1  0.3  0.0 118372  4872 pts/0    S    18:08   0:00 /bin/bash
	root        44  0.0  0.0 153184  3952 pts/0    R+   18:08   0:00 ps auxf
	[root @ NewNamespace 18:08 /home/cj/tmp]$ umount /proc
	[root @ NewNamespace 18:08 /home/cj/tmp]$ exit
      #+END_SRC
**** unshare() 和 setns()
      /*创建其它 namespace 时这两个调用都会直接进入新的namespace，PID namespace则不会*/

      /*一旦程序进程创建之后，它的 PID namespace 的关系就确定下来了，进程不会变更它们对应的 PID namespace。*/
      /*在Docker中，docker exec 会使用setns()函数加入已经存在的命名空间，但是最终还是会调用clone()函数。*/

*** (NS namespace)mount namespace
     1. 历史上第一个Linux namespace
     2. 通过隔离文件系统挂载点对隔离文件系统提供支持
     3. 标识符： CLONE_NEWNS
     4. 06年引入的挂载传播
	1) 共享关系(share relationship)
	   如果两个挂载对象具有共享关系，那么一个挂载对象中的挂载事件会传播到另一个挂载对象，反之亦然。
	2) 从属关系(slave relationship)
	   如果两个挂载对象形成从属关系，那么一个挂载对象中的挂载事件会传播到另一个挂载对象，反之不行；
	   在这种关系中，从属对象是事件的接受者。
     5. 一个挂载状态可能为以下一种：
	1) 共享挂载(shared)
	   传播事件的挂载对象称为共享挂载
	2) 从属挂载(slave)
	   接收传播事件的挂载对象称为从属挂载
	3) 共享／从属挂载(shared and slave)
	   同时兼有前述两者特征的挂载对象称为 /*共享/从属挂载*/
	4) 私有挂载(private)
	   既不传播也不接收传播事件的挂载对象称为私有挂载
	5) 不可绑定挂载(unbindable)
	   与私有挂载相似，但是不允许执行绑定挂载，即创建 mount namespace 时这块文件对象不可被复制。

	#+ATTR_HTML: :width 400pt
	[[file:../img/docker_mount.jpg]]
	上图中，

	最上层的 mount namespace 下的 /bin 目录与 child namespace 通过 master slave 方式
	进行挂载传播，当 mount namespace 中的 /bin 目录发生变化时，发生的挂载事件能够自动传播
	到 child namespace 中

	/lib 目录使用完全的共享挂载传播，各 namespace 之间发生的变化都会互相影响

	/proc 目录使用私有挂载传播的方式，各 mount namespace 之间互相隔离

	最后的 /root 目录一半都是管理员所有，不能让其它 mount namespace 挂载绑定

     6. 挂载属性命令, 默认情况下，所有挂载状态都是私有的，
	1. 设置为共享挂载的命令如下
	   #+BEGIN_SRC shell
	     $ mount --make-shared <mount-object>
	   #+END_SRC
	2. 从属挂载
	   #+BEGIN_SRC shell
	     $ mount --make-slave <shared-mount-object>
	   #+END_SRC
	3. 共享／从属挂载
	   #+BEGIN_SRC shell
	     $ mount --make-shared <slave-mount-object>
	   #+END_SRC
	4. 私有挂载
	   #+BEGIN_SRC shell
	     $ mount --make-private <mount-object>
	   #+END_SRC
	5. 不可绑定的挂载
	   #+BEGIN_SRC shell
	     $ make --make-unbindable <mount-object>
	   #+END_SRC
     7. 示例
	#+BEGIN_SRC c
	  // [...]
	  int child_pid = clone(child_main, child_stack + STACK_SIZE,
				CLONE_NEWNS | CLONE_NEWPID | CLONE_NEWIPC,
				CLONE_NEWUTS | SIGCHLD, NULL);
	  // [...]
	#+END_SRC
	#+BEGIN_SRC shell
	  [cj @ office 21:56 ~/tmp]$ sudo mount --make-private /proc
	  [cj @ office 21:56 ~/tmp]$ sudo ./a.out
	  程序开始：
	  在子进程中!
	  [root @ NewNamespace 21:57 /home/cj/tmp]$ mount --make-private -t proc proc /proc
	  [root @ NewNamespace 21:57 /home/cj/tmp]$ ps auxf
	  USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
	  root         1  0.3  0.0 118372  4836 pts/0    S    21:57   0:00 /bin/bash
	  root        44  0.0  0.0 153184  3740 pts/0    R+   21:57   0:00 ps auxf
	  [root @ NewNamespace 21:57 /home/cj/tmp]$ exit
	  已退出
	  [cj @ office 21:57 ~/tmp]$ ps aux | wc -l
	  184
	  [cj @ office 21:57 ~/tmp]$
	#+END_SRC
*** network namespace 概述
    1. 一个物理的网络设备最多存在于一个network namespace中，可以通过创建veth pair(虚拟网络设备对:
       有两端，类似管道，如果数据从一端传入另一端也能接收到，反之亦然)在不同 network namespace 间创建通道，
       以达到通信目的。
    2. 在建立起 veth pair 之前，假设容器初始化的进程称为 init。Docker daemon 在宿主机上负责创建这个
       veth pair，把另一端绑定到 docker0 网桥上，另一端介入新建的 network namespace 进程中。这个过程
       执行期间，Docker daemon 和 init 就通过 pipe 进行通信。具体来说，就是在 Docker daemon 完成
       veth pair 的创建之前，init在管道的另一端循环等待，知道管道另一端传来 Docker daemon 关于 veth
       设备的信息，并关闭管道。init 才结束等待的过程，并把它的 "eth0" 启动起来。如图：
	#+ATTR_HTML: :width 400pt
	[[file:../img/docker_network_veth.png]]
*** user namespaces
    1. 隔离用户:
       在宿主机上以普通用户创建的容器中，该用户可以拥有最高权限。
    2. 目前6个 namespace 中最后一个支持的，3.8内核时还尚未实现所有功能。(尚不成熟)
    3. 示例：
       #+BEGIN_SRC c
	 #define _GNU_SOURCE
	 #include <sys/types.h>
	 #include <sys/wait.h>
	 #include <stdio.h>
	 #include <sched.h>
	 #include <signal.h>
	 #include <unistd.h>
	 #include <sys/capability.h>

	 #define STACK_SIZE (1024 * 1024)

	 extern cap_t cap_get_proc(void);

	 static char child_stack[STACK_SIZE];
	 char * const child_args[] = {
		 "/bin/bash",
		 NULL,
	 };

	 int child_main(void *args)
	 {
		 printf("在子进程中!\n");

		 cap_t caps;

		 printf("eUID = %ld; eGID = %ld; ",
			(long)geteuid(), (long)getegid());
		 caps = cap_get_proc();

		 printf("capabilities: %s\n", cap_to_text(caps, NULL));

		 execv(child_args[0], child_args);
		 return 1;
	 }

	 int main(void)
	 {
		 printf("程序开始：\n");
		 int child_pid = clone(child_main, child_stack + STACK_SIZE,
				       CLONE_NEWIPC | CLONE_NEWUTS | SIGCHLD |
				       CLONE_NEWPID | CLONE_NEWNS | CLONE_NEWUSER,
				       NULL);
		 if (0 > child_pid)
			 perror("不知到为什么错了");
		 waitpid(child_pid, NULL, 0);
		 puts("已退出");
		 return 0;
	 }
       #+END_SRC
       #+BEGIN_SRC shell
	 [cj @ office 22:59 ~/tmp]$ id
	 uid=1000(cj) gid=1000(cj) 组=1000(cj),10(wheel)
	 [cj @ office 22:59 ~/tmp]$ ./a.out
	 程序开始：
	 在子进程中!
	 eUID = 65534; eGID = 65534; capabilities: = cap_chown,cap_dac_override,[...]37+ep
	 # 这时拥有了对整个文件系统做任何修改的权限
	 AC available
	 [nfsnobody @ office 22:59 ~/tmp]$ id
	 uid=65534(nfsnobody) gid=65534(nfsnobody) 组=65534(nfsnobody)
	 [nfsnobody @ office 23:00 ~/tmp]$
       #+END_SRC
    4. 通过上述示例得出：
       1) user namespace 创建后，第一个进程被赋予了该 namespace 中的全部权限，
	  这样该 init 进程就可以完成所有必要的初始化工作。
       2) 从 namespace 内部观察到的 UID 和 GID 已经与外部不同了，默认显示为65534，表示尚未
	  与外部 namespace 用户映射。所以 /*需要对 user namespace 内部的这个初始 user 和它外部 namespace 的某个用户建立映射。*/
	  这样在操作外部 namespace 时，系统可以检验权限。
       3) 新用户在新 namespace 中有全部权限，外部 namespace 用户则没有任何权限。
	  #+BEGIN_SRC shell
	    [nfsnobody @ office 23:10 ~/tmp]$ ll
	    总用量 28
	    ---------- 1 nfsnobody nfsnobody 10536 2月  24 22:59 a.out
	    -rw-rw-r-- 1 nfsnobody nfsnobody   313 2月  22 15:07 monitor_db_m.sh
	    drwxrwxr-x 2 nfsnobody nfsnobody  4096 2月  18 17:12 sinatra/
	    -rwxr--r-- 1 nfsnobody nfsnobody   964 2月  24 22:59 uts.c*
	    -rwxr--r-- 1 nfsnobody nfsnobody   744 2月  24 21:43 uts.c~*
	    [nfsnobody @ office 23:10 /tmp]$ exit
	    已退出
	    [cj @ office 23:17 ~/tmp]$ ll
	    总用量 28
	    ---------- 1 cj cj 10536 2月  24 22:59 a.out
	    -rw-rw-r-- 1 cj cj   313 2月  22 15:07 monitor_db_m.sh
	    drwxrwxr-x 2 cj cj  4096 2月  18 17:12 sinatra/
	    -rwxr--r-- 1 cj cj   964 2月  24 22:59 uts.c*
	    -rwxr--r-- 1 cj cj   744 2月  24 21:43 uts.c~*
	  #+END_SRC

       4) 用户绑定
	  两个文件:
	  #+BEGIN_SRC shell
	    [cj @ office 15:11 ~/tmp]$ # 格式: ID-inside-ns ID-outside-ns length
	    [cj @ office 15:13 ~/tmp]$ cat /proc/$$/uid_map
		     0          0 4294967295
	    [cj @ office 11:20 ~/tmp]$ cat /proc/$$/gid_map
		     0          0 4294967295
	  #+END_SRC
	  文件属性：
	  1. 只允许由拥有该 user namespace 中 CAP_SETUID 的父 namespace 或者子 namespace
	  2. 写入的进程必须是该 user namespace 的 父namespace 或者 子namespace
	  3. ID-inside-ns 表示新建的 user namespace 中对应的 user/group ID，第二个字段
	     ID-outside-ns 表示 namespace 外部映射的 user/group ID。最后一个字段表示映射范围，
	     通常填1，表示只映射一个; 如果大于1的值，则按顺序建立一一映射。

	  4. 示例：
	     #+BEGIN_SRC c
	       // [...]
	       void set_uid_map(pid_t pid, int inside_id, int outside_id, int length)
	       {
		       char path[256];
		       sprintf(path, "/proc/%d/uid_map", getpid());
		       FILE *uid_map = fopen(path, "w");
		       if (uid_map <= 0)
			       perror("fopen path");
		       fprintf(uid_map, "%d %d %d", inside_id, outside_id, length);
		       fclose(uid_map);
	       }

	       void set_gid_map(pid_t pid, int inside_id, int outside_id, int length)
	       {
		       char path[256];
		       sprintf(path, "/proc/%d/gid_map", getpid());
		       FILE *gid_map = fopen(path, "w");
		       fprintf(gid_map, "%d %d %d", inside_id, outside_id, length);
		       fclose(gid_map);
	       }
	       int child_main(void *args)
	       {
		       cap_t caps;

		       printf("在子进程中!\n");

		       set_uid_map(getpid(), 0, 1000, 1);
		       set_gid_map(getpid(), 0, 1000, 1);

		       printf("eUID = %ld; eGID = %ld; ",
			      (long)geteuid(), (long)getegid());
		       caps = cap_get_proc();

		       printf("capabilities: %s\n", cap_to_text(caps, NULL));

		       execv(child_args[0], child_args);
		       return 1;
	       }
	       // [...]
	     #+END_SRC
	     编译 & 运行
	     #+BEGIN_SRC shell
	       [cj @ office 12:41 ~/tmp]$ ./a.out
	       程序开始：
	       在子进程中!
	       /proc/31716/uid_map
	       eUID = 0; eGID = 65534; ...,37+ep
	       AC available
	       [root @ office 12:41 ~/tmp]$
	     #+END_SRC
    5. 如果要把 user namespace 与其它 namespace 混合使用，依旧需要root权限。解决方案是先以普通
       用户身份创建 user namespace，然后在新建的 namespace 中作为 root，再 clone() 进程加入其它
       类型的 namespace 隔离。

* 原理(实现方式)—— cgroups
** what's the cgroups
   1. 由来
      cgroups 最初名为 process container，Google 内两个工程师在 06 年提出，后来由于名字有歧义，
      在 07 年更名为 control groups，并整合进 Linux 内核。
   2. 官方定义
      /*cgroups 是 Linux 内核提供的一种机制，这种机制可以根据需求把一系列系统任务及其子任务整合(或*/
      /*分离)到按资源划分等级的不同组内，从而为系统资源管理提供一个同一的框架。*/
   3. 特点
      1. cgroups 的 API 以一个伪文件系统的方式实现，用户态的程序可以通过文件操作实现 cgroups 的组织管理。
      2. cgroups 的组织管理操作单元可以细粒度到线程级别，用户可以对其创建、销毁，实现资源再分配和管理。
      3. 所有资源管理的功能都以子系统的方式实现，接口统一。
      4. 子任务创建之初与其父任务处于同一个 cgroups 的控制组。
   4. 从本质上来说，cgroups 是内核附加在程序上的一系列钩子(hooks)，通过程序运行时对资源的调度触发相应的钩子
      以达到资源追踪和限制的目的。
** 四大功能
   1. 资源限制
      cgroups可以对任务使用的资源总额进行限制。如设定应用运行时使用内存的上限，一旦超过配额就发出 OOM (Out of Memory)
   2. 优先级分配
      通过分配的 CPU 时间片数量及磁盘 IO 带宽大小，实际上就相当于控制了任务运行的优先级。
   3. 资源统计
       cgroups 可以统计系统的资源使用量，如 CPU 使用时长、内存用量等，这个功能非常适用于计费。
   4. 任务控制
       cgroups 可以对任务执行挂起、恢复等
** cgroups 术语表
   1. task（任务）
      在 cgroups 术语中，任务表示系统的一个进程或线程
   2. cgroup（控制组）
      cgroups中的资源控制都以 cgroup 为单位实现。一个任务可以加入某个 cgroup，也可以从某个 cgroup
       迁移到另一个 cgroup。
   3. subsystem（子系统）
      cgroups 中的子系统就是一个资源调度控制器。CPU 子系统、内存子系统各自负责自己的调度。
   4. hierarchy（层级）
      层级由一系列 cgroup 以一个树状结构排列而成，每个层级通过绑定对应的子系统进行资源控制。
** 组织结构与基本规则 这里不理解，还需要学习
   1. 同一个层级可以附加一个或多个子系统。
   2. 一个子系统可以附加到多个层级，当且仅当目标层级只有唯一一个子系统时。
   3. 系统每次新建一个层级时，该系统上的所有任务默认加入这个新建层级的初始化cgroups，这个 cgroup 也被称为 root cgroup。
   4. 任务在fork/clone自身时创建的子任务默认与原任务在同一个 cgroup 中，但是子任务允许被移动到不同的 cgroup 中。

   #+ATTR_HTML: :width 500pt
   [[file:../img/cgroups_system.png]]
** 子系统简介
   子系统实际上就是 cgroups 的资源控制系统

* Docker 常用选项
  | 选项                      | 作用                                                                                                                                                            |
  |---------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------|
  | -i                        | 交互模式，始终保持输入流开放                                                                                                                                    |
  | -t                        | 分配一个伪终端                                                                                                                                                  |
  | --name                    | 启动时指定容器的名字                                                                                                                                            |
  | -c                        | 给运行在容器中的所有进程分配CPU的shares值                                                                                                                       |
  | -m                        | 用于限制为容器中所有进程                                                                                                                                        |
  | -v                        | 用于挂载一个Volume，可以用多个-v参数同时挂载多个，格式：[host-dir]:[container-dir]:[rw/ro]                                                                      |
  | -p                        | 用于将容器的端口映射到宿主机的端口，常用格式：hostPort:containerport                                                                                            |
  | run                       | 新建一个容器                                                                                                                                                    |
  | start/stop/restart        | 操作一个已存在的容器                                                                                                                                            |
  | rmi/rm                    | rmi 用于删除镜像，rm用来删除容器                                                                                                                                |
  | attach                    | 连接到一个正在运行的容器                                                                                                                                        |
  | inspect                   | 查看镜像和容器的详细信息，默认列出所有信息，--format 参数用来指定输出的模板格式：docker inspect --format='{{.NetworkSettings.IPAddress}}' ee36                  |
  | events、history和logs命令 | 用于查看Docker的系统日志信息。events 打印实时的系统事件; history打印出指定镜像的历史版本信息，即构建该镜像的每一层镜像的命令记录; logs 打印容器中进程的运行日志 |
  |                           |                                                                                                                                                                 |
